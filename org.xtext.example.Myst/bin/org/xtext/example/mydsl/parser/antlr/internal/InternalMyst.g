/*
 * generated by Xtext 2.19.0
 */
grammar InternalMyst;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MystGrammarAccess;

}

@parser::members {

 	private MystGrammarAccess grammarAccess;

    public InternalMystParser(TokenStream input, MystGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected MystGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getCsvCSVParserRuleCall_0_0());
				}
				lv_csv_0_0=ruleCSV
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"csv",
						lv_csv_0_0,
						"org.xtext.example.mydsl.Myst.CSV");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getParseParseParserRuleCall_1_0());
				}
				lv_parse_1_0=ruleParse
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"parse",
						lv_parse_1_0,
						"org.xtext.example.mydsl.Myst.Parse");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getCalculCalculParserRuleCall_2_0());
				}
				lv_calcul_2_0=ruleCalcul
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"calcul",
						lv_calcul_2_0,
						"org.xtext.example.mydsl.Myst.Calcul");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getMetricMetricEnumRuleCall_3_0());
				}
				lv_metric_3_0=ruleMetric
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"metric",
						lv_metric_3_0,
						"org.xtext.example.mydsl.Myst.Metric");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCSV
entryRuleCSV returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCSVRule()); }
	iv_ruleCSV=ruleCSV
	{ $current=$iv_ruleCSV.current; }
	EOF;

// Rule CSV
ruleCSV returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='CSV'
		{
			newLeafNode(otherlv_0, grammarAccess.getCSVAccess().getCSVKeyword_0());
		}
		(
			(
				lv_cvsfile_1_0=RULE_STRING
				{
					newLeafNode(lv_cvsfile_1_0, grammarAccess.getCSVAccess().getCvsfileSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCSVRule());
					}
					setWithLastConsumed(
						$current,
						"cvsfile",
						lv_cvsfile_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleParse
entryRuleParse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParseRule()); }
	iv_ruleParse=ruleParse
	{ $current=$iv_ruleParse.current; }
	EOF;

// Rule Parse
ruleParse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='parse'
		{
			newLeafNode(otherlv_0, grammarAccess.getParseAccess().getParseKeyword_0());
		}
		(
			(
				lv_variableCible_1_0=RULE_STRING
				{
					newLeafNode(lv_variableCible_1_0, grammarAccess.getParseAccess().getVariableCibleSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParseRule());
					}
					setWithLastConsumed(
						$current,
						"variableCible",
						lv_variableCible_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
	)
;

// Entry rule entryRuleCalcul
entryRuleCalcul returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCalculRule()); }
	iv_ruleCalcul=ruleCalcul
	{ $current=$iv_ruleCalcul.current; }
	EOF;

// Rule Calcul
ruleCalcul returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCalculAccess().getStrategyStrategyParserRuleCall_0_0());
				}
				lv_strategy_0_0=ruleStrategy
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCalculRule());
					}
					set(
						$current,
						"strategy",
						lv_strategy_0_0,
						"org.xtext.example.mydsl.Myst.Strategy");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=','
		{
			newLeafNode(otherlv_1, grammarAccess.getCalculAccess().getCommaKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCalculAccess().getAlgorithmAlgorithmEnumRuleCall_2_0());
				}
				lv_algorithm_2_0=ruleAlgorithm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCalculRule());
					}
					set(
						$current,
						"algorithm",
						lv_algorithm_2_0,
						"org.xtext.example.mydsl.Myst.Algorithm");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStrategy
entryRuleStrategy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStrategyRule()); }
	iv_ruleStrategy=ruleStrategy
	{ $current=$iv_ruleStrategy.current; }
	EOF;

// Rule Strategy
ruleStrategy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStrategyAccess().getTrainingTestTrainingTestParserRuleCall_0_0());
				}
				lv_trainingTest_0_0=ruleTrainingTest
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStrategyRule());
					}
					set(
						$current,
						"trainingTest",
						lv_trainingTest_0_0,
						"org.xtext.example.mydsl.Myst.TrainingTest");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStrategyAccess().getCrossValidationCrossValidationParserRuleCall_1_0());
				}
				lv_crossValidation_1_0=ruleCrossValidation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStrategyRule());
					}
					set(
						$current,
						"crossValidation",
						lv_crossValidation_1_0,
						"org.xtext.example.mydsl.Myst.CrossValidation");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCrossValidation
entryRuleCrossValidation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCrossValidationRule()); }
	iv_ruleCrossValidation=ruleCrossValidation
	{ $current=$iv_ruleCrossValidation.current; }
	EOF;

// Rule CrossValidation
ruleCrossValidation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_motcle_0_0='crossValidation'
			{
				newLeafNode(lv_motcle_0_0, grammarAccess.getCrossValidationAccess().getMotcleCrossValidationKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getCrossValidationRule());
				}
				setWithLastConsumed($current, "motcle", lv_motcle_0_0, "crossValidation");
			}
		)
	)
;

// Entry rule entryRuleTrainingTest
entryRuleTrainingTest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTrainingTestRule()); }
	iv_ruleTrainingTest=ruleTrainingTest
	{ $current=$iv_ruleTrainingTest.current; }
	EOF;

// Rule TrainingTest
ruleTrainingTest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='trainingTest'
		{
			newLeafNode(otherlv_0, grammarAccess.getTrainingTestAccess().getTrainingTestKeyword_0());
		}
		otherlv_1=','
		{
			newLeafNode(otherlv_1, grammarAccess.getTrainingTestAccess().getCommaKeyword_1());
		}
		(
			(
				lv_testRate_2_0=RULE_POURCENTAGE_TEST
				{
					newLeafNode(lv_testRate_2_0, grammarAccess.getTrainingTestAccess().getTestRatePOURCENTAGE_TESTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTrainingTestRule());
					}
					setWithLastConsumed(
						$current,
						"testRate",
						lv_testRate_2_0,
						"org.xtext.example.mydsl.Myst.POURCENTAGE_TEST");
				}
			)
		)
	)
;

// Rule Algorithm
ruleAlgorithm returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='linearDiscriminantAnalysis'
			{
				$current = grammarAccess.getAlgorithmAccess().getLinearDiscriminantAnalysisEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAlgorithmAccess().getLinearDiscriminantAnalysisEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='supportVectorMachines'
			{
				$current = grammarAccess.getAlgorithmAccess().getSupportVectorMachinesEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAlgorithmAccess().getSupportVectorMachinesEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='quadraticDiscriminantAnalysis'
			{
				$current = grammarAccess.getAlgorithmAccess().getQuadraticDiscriminantAnalysisEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAlgorithmAccess().getQuadraticDiscriminantAnalysisEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='kernelEstimation'
			{
				$current = grammarAccess.getAlgorithmAccess().getKernelEstimationEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getAlgorithmAccess().getKernelEstimationEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='boosting'
			{
				$current = grammarAccess.getAlgorithmAccess().getBoostingEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getAlgorithmAccess().getBoostingEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='decisionTree'
			{
				$current = grammarAccess.getAlgorithmAccess().getDecisionTreeEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getAlgorithmAccess().getDecisionTreeEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='neutralNetwork'
			{
				$current = grammarAccess.getAlgorithmAccess().getNeutralNetworkEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getAlgorithmAccess().getNeutralNetworkEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='learningVectorQuantization'
			{
				$current = grammarAccess.getAlgorithmAccess().getLearningVectorQuantizationEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getAlgorithmAccess().getLearningVectorQuantizationEnumLiteralDeclaration_7());
			}
		)
	)
;

// Rule Metric
ruleMetric returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='showAccuracy'
			{
				$current = grammarAccess.getMetricAccess().getAccuracyEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMetricAccess().getAccuracyEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='showRecall'
			{
				$current = grammarAccess.getMetricAccess().getRecallEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMetricAccess().getRecallEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='showFMeasure'
			{
				$current = grammarAccess.getMetricAccess().getMeasureEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMetricAccess().getMeasureEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='showPrecision'
			{
				$current = grammarAccess.getMetricAccess().getPrecisionEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getMetricAccess().getPrecisionEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='showBalancedAccuracyScore'
			{
				$current = grammarAccess.getMetricAccess().getBalancedAccuracyScoreEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getMetricAccess().getBalancedAccuracyScoreEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='showHammingLoss'
			{
				$current = grammarAccess.getMetricAccess().getHammingLossEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getMetricAccess().getHammingLossEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='showJaccardScore'
			{
				$current = grammarAccess.getMetricAccess().getJaccardScoreEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getMetricAccess().getJaccardScoreEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='showMatthewsCorrCoef'
			{
				$current = grammarAccess.getMetricAccess().getMatthewsCorrCoefEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getMetricAccess().getMatthewsCorrCoefEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='showZeroOneLoss'
			{
				$current = grammarAccess.getMetricAccess().getZeroOneLossEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getMetricAccess().getZeroOneLossEnumLiteralDeclaration_8());
			}
		)
	)
;

RULE_POURCENTAGE_TEST : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
