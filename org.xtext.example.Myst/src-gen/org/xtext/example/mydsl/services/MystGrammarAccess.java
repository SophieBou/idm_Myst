/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MystGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Myst.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCsvAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCsvCSVParserRuleCall_0_0 = (RuleCall)cCsvAssignment_0.eContents().get(0);
		private final Assignment cParseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParseParseParserRuleCall_1_0 = (RuleCall)cParseAssignment_1.eContents().get(0);
		private final Assignment cCalculAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCalculCalculParserRuleCall_2_0 = (RuleCall)cCalculAssignment_2.eContents().get(0);
		private final Assignment cMetricAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMetricMetricEnumRuleCall_3_0 = (RuleCall)cMetricAssignment_3.eContents().get(0);
		
		//Program:
		//	csv=CSV parse=Parse calcul=Calcul metric=Metric;
		@Override public ParserRule getRule() { return rule; }
		
		//csv=CSV parse=Parse calcul=Calcul metric=Metric
		public Group getGroup() { return cGroup; }
		
		//csv=CSV
		public Assignment getCsvAssignment_0() { return cCsvAssignment_0; }
		
		//CSV
		public RuleCall getCsvCSVParserRuleCall_0_0() { return cCsvCSVParserRuleCall_0_0; }
		
		//parse=Parse
		public Assignment getParseAssignment_1() { return cParseAssignment_1; }
		
		//Parse
		public RuleCall getParseParseParserRuleCall_1_0() { return cParseParseParserRuleCall_1_0; }
		
		//calcul=Calcul
		public Assignment getCalculAssignment_2() { return cCalculAssignment_2; }
		
		//Calcul
		public RuleCall getCalculCalculParserRuleCall_2_0() { return cCalculCalculParserRuleCall_2_0; }
		
		//metric=Metric
		public Assignment getMetricAssignment_3() { return cMetricAssignment_3; }
		
		//Metric
		public RuleCall getMetricMetricEnumRuleCall_3_0() { return cMetricMetricEnumRuleCall_3_0; }
	}
	public class CSVElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Myst.CSV");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCSVKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCvsfileAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCvsfileSTRINGTerminalRuleCall_1_0 = (RuleCall)cCvsfileAssignment_1.eContents().get(0);
		
		//CSV:
		//	'CSV' cvsfile=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'CSV' cvsfile=STRING
		public Group getGroup() { return cGroup; }
		
		//'CSV'
		public Keyword getCSVKeyword_0() { return cCSVKeyword_0; }
		
		//cvsfile=STRING
		public Assignment getCvsfileAssignment_1() { return cCvsfileAssignment_1; }
		
		//STRING
		public RuleCall getCvsfileSTRINGTerminalRuleCall_1_0() { return cCvsfileSTRINGTerminalRuleCall_1_0; }
	}
	public class ParseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Myst.Parse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableCibleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableCibleSTRINGTerminalRuleCall_1_0 = (RuleCall)cVariableCibleAssignment_1.eContents().get(0);
		
		//Parse:
		//	'parse' variableCible=STRING?;
		@Override public ParserRule getRule() { return rule; }
		
		//'parse' variableCible=STRING?
		public Group getGroup() { return cGroup; }
		
		//'parse'
		public Keyword getParseKeyword_0() { return cParseKeyword_0; }
		
		//variableCible=STRING?
		public Assignment getVariableCibleAssignment_1() { return cVariableCibleAssignment_1; }
		
		//STRING
		public RuleCall getVariableCibleSTRINGTerminalRuleCall_1_0() { return cVariableCibleSTRINGTerminalRuleCall_1_0; }
	}
	public class CalculElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Myst.Calcul");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStrategyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStrategyStrategyParserRuleCall_0_0 = (RuleCall)cStrategyAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAlgorithmAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAlgorithmAlgorithmEnumRuleCall_2_0 = (RuleCall)cAlgorithmAssignment_2.eContents().get(0);
		
		//Calcul:
		//	strategy=Strategy ',' algorithm=Algorithm;
		@Override public ParserRule getRule() { return rule; }
		
		//strategy=Strategy ',' algorithm=Algorithm
		public Group getGroup() { return cGroup; }
		
		//strategy=Strategy
		public Assignment getStrategyAssignment_0() { return cStrategyAssignment_0; }
		
		//Strategy
		public RuleCall getStrategyStrategyParserRuleCall_0_0() { return cStrategyStrategyParserRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//algorithm=Algorithm
		public Assignment getAlgorithmAssignment_2() { return cAlgorithmAssignment_2; }
		
		//Algorithm
		public RuleCall getAlgorithmAlgorithmEnumRuleCall_2_0() { return cAlgorithmAlgorithmEnumRuleCall_2_0; }
	}
	public class StrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Myst.Strategy");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTrainingTestAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTrainingTestTrainingTestParserRuleCall_0_0 = (RuleCall)cTrainingTestAssignment_0.eContents().get(0);
		private final Assignment cCrossValidationAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCrossValidationCrossValidationParserRuleCall_1_0 = (RuleCall)cCrossValidationAssignment_1.eContents().get(0);
		
		//Strategy:
		//	trainingTest=TrainingTest | crossValidation=CrossValidation;
		@Override public ParserRule getRule() { return rule; }
		
		//trainingTest=TrainingTest | crossValidation=CrossValidation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//trainingTest=TrainingTest
		public Assignment getTrainingTestAssignment_0() { return cTrainingTestAssignment_0; }
		
		//TrainingTest
		public RuleCall getTrainingTestTrainingTestParserRuleCall_0_0() { return cTrainingTestTrainingTestParserRuleCall_0_0; }
		
		//crossValidation=CrossValidation
		public Assignment getCrossValidationAssignment_1() { return cCrossValidationAssignment_1; }
		
		//CrossValidation
		public RuleCall getCrossValidationCrossValidationParserRuleCall_1_0() { return cCrossValidationCrossValidationParserRuleCall_1_0; }
	}
	public class CrossValidationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Myst.CrossValidation");
		private final Assignment cMotcleAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cMotcleCrossValidationKeyword_0 = (Keyword)cMotcleAssignment.eContents().get(0);
		
		//CrossValidation:
		//	motcle='crossValidation';
		@Override public ParserRule getRule() { return rule; }
		
		//motcle='crossValidation'
		public Assignment getMotcleAssignment() { return cMotcleAssignment; }
		
		//'crossValidation'
		public Keyword getMotcleCrossValidationKeyword_0() { return cMotcleCrossValidationKeyword_0; }
	}
	public class TrainingTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Myst.TrainingTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTrainingTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTestRateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTestRatePOURCENTAGE_TESTTerminalRuleCall_2_0 = (RuleCall)cTestRateAssignment_2.eContents().get(0);
		
		//TrainingTest:
		//	'trainingTest' ',' testRate=POURCENTAGE_TEST;
		@Override public ParserRule getRule() { return rule; }
		
		//'trainingTest' ',' testRate=POURCENTAGE_TEST
		public Group getGroup() { return cGroup; }
		
		//'trainingTest'
		public Keyword getTrainingTestKeyword_0() { return cTrainingTestKeyword_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//testRate=POURCENTAGE_TEST
		public Assignment getTestRateAssignment_2() { return cTestRateAssignment_2; }
		
		//POURCENTAGE_TEST
		public RuleCall getTestRatePOURCENTAGE_TESTTerminalRuleCall_2_0() { return cTestRatePOURCENTAGE_TESTTerminalRuleCall_2_0; }
	}
	
	public class AlgorithmElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Myst.Algorithm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLinearDiscriminantAnalysisEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLinearDiscriminantAnalysisLinearDiscriminantAnalysisKeyword_0_0 = (Keyword)cLinearDiscriminantAnalysisEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSupportVectorMachinesEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSupportVectorMachinesSupportVectorMachinesKeyword_1_0 = (Keyword)cSupportVectorMachinesEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cQuadraticDiscriminantAnalysisEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cQuadraticDiscriminantAnalysisQuadraticDiscriminantAnalysisKeyword_2_0 = (Keyword)cQuadraticDiscriminantAnalysisEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cKernelEstimationEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cKernelEstimationKernelEstimationKeyword_3_0 = (Keyword)cKernelEstimationEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBoostingEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBoostingBoostingKeyword_4_0 = (Keyword)cBoostingEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDecisionTreeEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDecisionTreeDecisionTreeKeyword_5_0 = (Keyword)cDecisionTreeEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cNeutralNetworkEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cNeutralNetworkNeutralNetworkKeyword_6_0 = (Keyword)cNeutralNetworkEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cLearningVectorQuantizationEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cLearningVectorQuantizationLearningVectorQuantizationKeyword_7_0 = (Keyword)cLearningVectorQuantizationEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum Algorithm:
		//	LinearDiscriminantAnalysis='linearDiscriminantAnalysis' | SupportVectorMachines='supportVectorMachines' |
		//	QuadraticDiscriminantAnalysis='quadraticDiscriminantAnalysis' | KernelEstimation='kernelEstimation' |
		//	Boosting='boosting' | DecisionTree='decisionTree' | NeutralNetwork='neutralNetwork' |
		//	LearningVectorQuantization='learningVectorQuantization';
		public EnumRule getRule() { return rule; }
		
		//LinearDiscriminantAnalysis='linearDiscriminantAnalysis' | SupportVectorMachines='supportVectorMachines' |
		//QuadraticDiscriminantAnalysis='quadraticDiscriminantAnalysis' | KernelEstimation='kernelEstimation' |
		//Boosting='boosting' | DecisionTree='decisionTree' | NeutralNetwork='neutralNetwork' |
		//LearningVectorQuantization='learningVectorQuantization'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LinearDiscriminantAnalysis='linearDiscriminantAnalysis'
		public EnumLiteralDeclaration getLinearDiscriminantAnalysisEnumLiteralDeclaration_0() { return cLinearDiscriminantAnalysisEnumLiteralDeclaration_0; }
		
		//'linearDiscriminantAnalysis'
		public Keyword getLinearDiscriminantAnalysisLinearDiscriminantAnalysisKeyword_0_0() { return cLinearDiscriminantAnalysisLinearDiscriminantAnalysisKeyword_0_0; }
		
		//SupportVectorMachines='supportVectorMachines'
		public EnumLiteralDeclaration getSupportVectorMachinesEnumLiteralDeclaration_1() { return cSupportVectorMachinesEnumLiteralDeclaration_1; }
		
		//'supportVectorMachines'
		public Keyword getSupportVectorMachinesSupportVectorMachinesKeyword_1_0() { return cSupportVectorMachinesSupportVectorMachinesKeyword_1_0; }
		
		//QuadraticDiscriminantAnalysis='quadraticDiscriminantAnalysis'
		public EnumLiteralDeclaration getQuadraticDiscriminantAnalysisEnumLiteralDeclaration_2() { return cQuadraticDiscriminantAnalysisEnumLiteralDeclaration_2; }
		
		//'quadraticDiscriminantAnalysis'
		public Keyword getQuadraticDiscriminantAnalysisQuadraticDiscriminantAnalysisKeyword_2_0() { return cQuadraticDiscriminantAnalysisQuadraticDiscriminantAnalysisKeyword_2_0; }
		
		//KernelEstimation='kernelEstimation'
		public EnumLiteralDeclaration getKernelEstimationEnumLiteralDeclaration_3() { return cKernelEstimationEnumLiteralDeclaration_3; }
		
		//'kernelEstimation'
		public Keyword getKernelEstimationKernelEstimationKeyword_3_0() { return cKernelEstimationKernelEstimationKeyword_3_0; }
		
		//Boosting='boosting'
		public EnumLiteralDeclaration getBoostingEnumLiteralDeclaration_4() { return cBoostingEnumLiteralDeclaration_4; }
		
		//'boosting'
		public Keyword getBoostingBoostingKeyword_4_0() { return cBoostingBoostingKeyword_4_0; }
		
		//DecisionTree='decisionTree'
		public EnumLiteralDeclaration getDecisionTreeEnumLiteralDeclaration_5() { return cDecisionTreeEnumLiteralDeclaration_5; }
		
		//'decisionTree'
		public Keyword getDecisionTreeDecisionTreeKeyword_5_0() { return cDecisionTreeDecisionTreeKeyword_5_0; }
		
		//NeutralNetwork='neutralNetwork'
		public EnumLiteralDeclaration getNeutralNetworkEnumLiteralDeclaration_6() { return cNeutralNetworkEnumLiteralDeclaration_6; }
		
		//'neutralNetwork'
		public Keyword getNeutralNetworkNeutralNetworkKeyword_6_0() { return cNeutralNetworkNeutralNetworkKeyword_6_0; }
		
		//LearningVectorQuantization='learningVectorQuantization'
		public EnumLiteralDeclaration getLearningVectorQuantizationEnumLiteralDeclaration_7() { return cLearningVectorQuantizationEnumLiteralDeclaration_7; }
		
		//'learningVectorQuantization'
		public Keyword getLearningVectorQuantizationLearningVectorQuantizationKeyword_7_0() { return cLearningVectorQuantizationLearningVectorQuantizationKeyword_7_0; }
	}
	public class MetricElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Myst.Metric");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAccuracyEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAccuracyShowAccuracyKeyword_0_0 = (Keyword)cAccuracyEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRecallEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRecallShowRecallKeyword_1_0 = (Keyword)cRecallEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMeasureEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMeasureShowFMeasureKeyword_2_0 = (Keyword)cMeasureEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPrecisionEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPrecisionShowPrecisionKeyword_3_0 = (Keyword)cPrecisionEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBalancedAccuracyScoreEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBalancedAccuracyScoreShowBalancedAccuracyScoreKeyword_4_0 = (Keyword)cBalancedAccuracyScoreEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cHammingLossEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cHammingLossShowHammingLossKeyword_5_0 = (Keyword)cHammingLossEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cJaccardScoreEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cJaccardScoreShowJaccardScoreKeyword_6_0 = (Keyword)cJaccardScoreEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cMatthewsCorrCoefEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cMatthewsCorrCoefShowMatthewsCorrCoefKeyword_7_0 = (Keyword)cMatthewsCorrCoefEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cZeroOneLossEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cZeroOneLossShowZeroOneLossKeyword_8_0 = (Keyword)cZeroOneLossEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum Metric:
		//	Accuracy='showAccuracy' | Recall='showRecall' | Measure='showFMeasure' | Precision='showPrecision' |
		//	BalancedAccuracyScore='showBalancedAccuracyScore' | HammingLoss='showHammingLoss' | JaccardScore='showJaccardScore' |
		//	matthewsCorrCoef='showMatthewsCorrCoef' | ZeroOneLoss='showZeroOneLoss';
		public EnumRule getRule() { return rule; }
		
		//Accuracy='showAccuracy' | Recall='showRecall' | Measure='showFMeasure' | Precision='showPrecision' |
		//BalancedAccuracyScore='showBalancedAccuracyScore' | HammingLoss='showHammingLoss' | JaccardScore='showJaccardScore' |
		//matthewsCorrCoef='showMatthewsCorrCoef' | ZeroOneLoss='showZeroOneLoss'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Accuracy='showAccuracy'
		public EnumLiteralDeclaration getAccuracyEnumLiteralDeclaration_0() { return cAccuracyEnumLiteralDeclaration_0; }
		
		//'showAccuracy'
		public Keyword getAccuracyShowAccuracyKeyword_0_0() { return cAccuracyShowAccuracyKeyword_0_0; }
		
		//Recall='showRecall'
		public EnumLiteralDeclaration getRecallEnumLiteralDeclaration_1() { return cRecallEnumLiteralDeclaration_1; }
		
		//'showRecall'
		public Keyword getRecallShowRecallKeyword_1_0() { return cRecallShowRecallKeyword_1_0; }
		
		//Measure='showFMeasure'
		public EnumLiteralDeclaration getMeasureEnumLiteralDeclaration_2() { return cMeasureEnumLiteralDeclaration_2; }
		
		//'showFMeasure'
		public Keyword getMeasureShowFMeasureKeyword_2_0() { return cMeasureShowFMeasureKeyword_2_0; }
		
		//Precision='showPrecision'
		public EnumLiteralDeclaration getPrecisionEnumLiteralDeclaration_3() { return cPrecisionEnumLiteralDeclaration_3; }
		
		//'showPrecision'
		public Keyword getPrecisionShowPrecisionKeyword_3_0() { return cPrecisionShowPrecisionKeyword_3_0; }
		
		//BalancedAccuracyScore='showBalancedAccuracyScore'
		public EnumLiteralDeclaration getBalancedAccuracyScoreEnumLiteralDeclaration_4() { return cBalancedAccuracyScoreEnumLiteralDeclaration_4; }
		
		//'showBalancedAccuracyScore'
		public Keyword getBalancedAccuracyScoreShowBalancedAccuracyScoreKeyword_4_0() { return cBalancedAccuracyScoreShowBalancedAccuracyScoreKeyword_4_0; }
		
		//HammingLoss='showHammingLoss'
		public EnumLiteralDeclaration getHammingLossEnumLiteralDeclaration_5() { return cHammingLossEnumLiteralDeclaration_5; }
		
		//'showHammingLoss'
		public Keyword getHammingLossShowHammingLossKeyword_5_0() { return cHammingLossShowHammingLossKeyword_5_0; }
		
		//JaccardScore='showJaccardScore'
		public EnumLiteralDeclaration getJaccardScoreEnumLiteralDeclaration_6() { return cJaccardScoreEnumLiteralDeclaration_6; }
		
		//'showJaccardScore'
		public Keyword getJaccardScoreShowJaccardScoreKeyword_6_0() { return cJaccardScoreShowJaccardScoreKeyword_6_0; }
		
		//matthewsCorrCoef='showMatthewsCorrCoef'
		public EnumLiteralDeclaration getMatthewsCorrCoefEnumLiteralDeclaration_7() { return cMatthewsCorrCoefEnumLiteralDeclaration_7; }
		
		//'showMatthewsCorrCoef'
		public Keyword getMatthewsCorrCoefShowMatthewsCorrCoefKeyword_7_0() { return cMatthewsCorrCoefShowMatthewsCorrCoefKeyword_7_0; }
		
		//ZeroOneLoss='showZeroOneLoss'
		public EnumLiteralDeclaration getZeroOneLossEnumLiteralDeclaration_8() { return cZeroOneLossEnumLiteralDeclaration_8; }
		
		//'showZeroOneLoss'
		public Keyword getZeroOneLossShowZeroOneLossKeyword_8_0() { return cZeroOneLossShowZeroOneLossKeyword_8_0; }
	}
	
	private final ProgramElements pProgram;
	private final CSVElements pCSV;
	private final ParseElements pParse;
	private final CalculElements pCalcul;
	private final StrategyElements pStrategy;
	private final CrossValidationElements pCrossValidation;
	private final TrainingTestElements pTrainingTest;
	private final AlgorithmElements eAlgorithm;
	private final MetricElements eMetric;
	private final TerminalRule tPOURCENTAGE_TEST;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MystGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pCSV = new CSVElements();
		this.pParse = new ParseElements();
		this.pCalcul = new CalculElements();
		this.pStrategy = new StrategyElements();
		this.pCrossValidation = new CrossValidationElements();
		this.pTrainingTest = new TrainingTestElements();
		this.eAlgorithm = new AlgorithmElements();
		this.eMetric = new MetricElements();
		this.tPOURCENTAGE_TEST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Myst.POURCENTAGE_TEST");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.Myst".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	csv=CSV parse=Parse calcul=Calcul metric=Metric;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//CSV:
	//	'CSV' cvsfile=STRING;
	public CSVElements getCSVAccess() {
		return pCSV;
	}
	
	public ParserRule getCSVRule() {
		return getCSVAccess().getRule();
	}
	
	//Parse:
	//	'parse' variableCible=STRING?;
	public ParseElements getParseAccess() {
		return pParse;
	}
	
	public ParserRule getParseRule() {
		return getParseAccess().getRule();
	}
	
	//Calcul:
	//	strategy=Strategy ',' algorithm=Algorithm;
	public CalculElements getCalculAccess() {
		return pCalcul;
	}
	
	public ParserRule getCalculRule() {
		return getCalculAccess().getRule();
	}
	
	//Strategy:
	//	trainingTest=TrainingTest | crossValidation=CrossValidation;
	public StrategyElements getStrategyAccess() {
		return pStrategy;
	}
	
	public ParserRule getStrategyRule() {
		return getStrategyAccess().getRule();
	}
	
	//CrossValidation:
	//	motcle='crossValidation';
	public CrossValidationElements getCrossValidationAccess() {
		return pCrossValidation;
	}
	
	public ParserRule getCrossValidationRule() {
		return getCrossValidationAccess().getRule();
	}
	
	//TrainingTest:
	//	'trainingTest' ',' testRate=POURCENTAGE_TEST;
	public TrainingTestElements getTrainingTestAccess() {
		return pTrainingTest;
	}
	
	public ParserRule getTrainingTestRule() {
		return getTrainingTestAccess().getRule();
	}
	
	//enum Algorithm:
	//	LinearDiscriminantAnalysis='linearDiscriminantAnalysis' | SupportVectorMachines='supportVectorMachines' |
	//	QuadraticDiscriminantAnalysis='quadraticDiscriminantAnalysis' | KernelEstimation='kernelEstimation' |
	//	Boosting='boosting' | DecisionTree='decisionTree' | NeutralNetwork='neutralNetwork' |
	//	LearningVectorQuantization='learningVectorQuantization';
	public AlgorithmElements getAlgorithmAccess() {
		return eAlgorithm;
	}
	
	public EnumRule getAlgorithmRule() {
		return getAlgorithmAccess().getRule();
	}
	
	//enum Metric:
	//	Accuracy='showAccuracy' | Recall='showRecall' | Measure='showFMeasure' | Precision='showPrecision' |
	//	BalancedAccuracyScore='showBalancedAccuracyScore' | HammingLoss='showHammingLoss' | JaccardScore='showJaccardScore' |
	//	matthewsCorrCoef='showMatthewsCorrCoef' | ZeroOneLoss='showZeroOneLoss';
	public MetricElements getMetricAccess() {
		return eMetric;
	}
	
	public EnumRule getMetricRule() {
		return getMetricAccess().getRule();
	}
	
	//terminal POURCENTAGE_TEST returns ecore::EDouble:
	//	INT ('.' INT);
	public TerminalRule getPOURCENTAGE_TESTRule() {
		return tPOURCENTAGE_TEST;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
