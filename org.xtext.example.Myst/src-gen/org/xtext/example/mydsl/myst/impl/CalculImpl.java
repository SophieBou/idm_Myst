/**
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.myst.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myst.Algorithm;
import org.xtext.example.mydsl.myst.Calcul;
import org.xtext.example.mydsl.myst.MystPackage;
import org.xtext.example.mydsl.myst.Strategy;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Calcul</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myst.impl.CalculImpl#getStrategy <em>Strategy</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myst.impl.CalculImpl#getAlgorithm <em>Algorithm</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CalculImpl extends MinimalEObjectImpl.Container implements Calcul
{
  /**
   * The cached value of the '{@link #getStrategy() <em>Strategy</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStrategy()
   * @generated
   * @ordered
   */
  protected Strategy strategy;

  /**
   * The default value of the '{@link #getAlgorithm() <em>Algorithm</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlgorithm()
   * @generated
   * @ordered
   */
  protected static final Algorithm ALGORITHM_EDEFAULT = Algorithm.LINEAR_DISCRIMINANT_ANALYSIS;

  /**
   * The cached value of the '{@link #getAlgorithm() <em>Algorithm</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlgorithm()
   * @generated
   * @ordered
   */
  protected Algorithm algorithm = ALGORITHM_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CalculImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MystPackage.Literals.CALCUL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Strategy getStrategy()
  {
    return strategy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStrategy(Strategy newStrategy, NotificationChain msgs)
  {
    Strategy oldStrategy = strategy;
    strategy = newStrategy;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MystPackage.CALCUL__STRATEGY, oldStrategy, newStrategy);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStrategy(Strategy newStrategy)
  {
    if (newStrategy != strategy)
    {
      NotificationChain msgs = null;
      if (strategy != null)
        msgs = ((InternalEObject)strategy).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MystPackage.CALCUL__STRATEGY, null, msgs);
      if (newStrategy != null)
        msgs = ((InternalEObject)newStrategy).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MystPackage.CALCUL__STRATEGY, null, msgs);
      msgs = basicSetStrategy(newStrategy, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MystPackage.CALCUL__STRATEGY, newStrategy, newStrategy));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Algorithm getAlgorithm()
  {
    return algorithm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAlgorithm(Algorithm newAlgorithm)
  {
    Algorithm oldAlgorithm = algorithm;
    algorithm = newAlgorithm == null ? ALGORITHM_EDEFAULT : newAlgorithm;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MystPackage.CALCUL__ALGORITHM, oldAlgorithm, algorithm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MystPackage.CALCUL__STRATEGY:
        return basicSetStrategy(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MystPackage.CALCUL__STRATEGY:
        return getStrategy();
      case MystPackage.CALCUL__ALGORITHM:
        return getAlgorithm();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MystPackage.CALCUL__STRATEGY:
        setStrategy((Strategy)newValue);
        return;
      case MystPackage.CALCUL__ALGORITHM:
        setAlgorithm((Algorithm)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MystPackage.CALCUL__STRATEGY:
        setStrategy((Strategy)null);
        return;
      case MystPackage.CALCUL__ALGORITHM:
        setAlgorithm(ALGORITHM_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MystPackage.CALCUL__STRATEGY:
        return strategy != null;
      case MystPackage.CALCUL__ALGORITHM:
        return algorithm != ALGORITHM_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (algorithm: ");
    result.append(algorithm);
    result.append(')');
    return result.toString();
  }

} //CalculImpl
