/**
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.myst.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.xtext.example.mydsl.myst.Algorithm;
import org.xtext.example.mydsl.myst.Calcul;
import org.xtext.example.mydsl.myst.CrossValidation;
import org.xtext.example.mydsl.myst.Metric;
import org.xtext.example.mydsl.myst.MystFactory;
import org.xtext.example.mydsl.myst.MystPackage;
import org.xtext.example.mydsl.myst.Parse;
import org.xtext.example.mydsl.myst.Program;
import org.xtext.example.mydsl.myst.Strategy;
import org.xtext.example.mydsl.myst.TrainingTest;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MystPackageImpl extends EPackageImpl implements MystPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass programEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass csvEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass parseEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass calculEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass strategyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass crossValidationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass trainingTestEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum algorithmEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum metricEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.xtext.example.mydsl.myst.MystPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private MystPackageImpl()
  {
    super(eNS_URI, MystFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link MystPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static MystPackage init()
  {
    if (isInited) return (MystPackage)EPackage.Registry.INSTANCE.getEPackage(MystPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredMystPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    MystPackageImpl theMystPackage = registeredMystPackage instanceof MystPackageImpl ? (MystPackageImpl)registeredMystPackage : new MystPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theMystPackage.createPackageContents();

    // Initialize created meta-data
    theMystPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theMystPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(MystPackage.eNS_URI, theMystPackage);
    return theMystPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getProgram()
  {
    return programEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getProgram_Csv()
  {
    return (EReference)programEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getProgram_Parse()
  {
    return (EReference)programEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getProgram_Calcul()
  {
    return (EReference)programEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getProgram_Metric()
  {
    return (EAttribute)programEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCSV()
  {
    return csvEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCSV_Cvsfile()
  {
    return (EAttribute)csvEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getParse()
  {
    return parseEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getParse_VariableCible()
  {
    return (EAttribute)parseEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCalcul()
  {
    return calculEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCalcul_Strategy()
  {
    return (EReference)calculEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCalcul_Algorithm()
  {
    return (EAttribute)calculEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStrategy()
  {
    return strategyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getStrategy_TrainingTest()
  {
    return (EReference)strategyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getStrategy_CrossValidation()
  {
    return (EReference)strategyEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCrossValidation()
  {
    return crossValidationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCrossValidation_Motcle()
  {
    return (EAttribute)crossValidationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTrainingTest()
  {
    return trainingTestEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTrainingTest_TestRate()
  {
    return (EAttribute)trainingTestEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getAlgorithm()
  {
    return algorithmEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getMetric()
  {
    return metricEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MystFactory getMystFactory()
  {
    return (MystFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    programEClass = createEClass(PROGRAM);
    createEReference(programEClass, PROGRAM__CSV);
    createEReference(programEClass, PROGRAM__PARSE);
    createEReference(programEClass, PROGRAM__CALCUL);
    createEAttribute(programEClass, PROGRAM__METRIC);

    csvEClass = createEClass(CSV);
    createEAttribute(csvEClass, CSV__CVSFILE);

    parseEClass = createEClass(PARSE);
    createEAttribute(parseEClass, PARSE__VARIABLE_CIBLE);

    calculEClass = createEClass(CALCUL);
    createEReference(calculEClass, CALCUL__STRATEGY);
    createEAttribute(calculEClass, CALCUL__ALGORITHM);

    strategyEClass = createEClass(STRATEGY);
    createEReference(strategyEClass, STRATEGY__TRAINING_TEST);
    createEReference(strategyEClass, STRATEGY__CROSS_VALIDATION);

    crossValidationEClass = createEClass(CROSS_VALIDATION);
    createEAttribute(crossValidationEClass, CROSS_VALIDATION__MOTCLE);

    trainingTestEClass = createEClass(TRAINING_TEST);
    createEAttribute(trainingTestEClass, TRAINING_TEST__TEST_RATE);

    // Create enums
    algorithmEEnum = createEEnum(ALGORITHM);
    metricEEnum = createEEnum(METRIC);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes

    // Initialize classes and features; add operations and parameters
    initEClass(programEClass, Program.class, "Program", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getProgram_Csv(), this.getCSV(), null, "csv", null, 0, 1, Program.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getProgram_Parse(), this.getParse(), null, "parse", null, 0, 1, Program.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getProgram_Calcul(), this.getCalcul(), null, "calcul", null, 0, 1, Program.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getProgram_Metric(), this.getMetric(), "metric", null, 0, 1, Program.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(csvEClass, org.xtext.example.mydsl.myst.CSV.class, "CSV", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCSV_Cvsfile(), ecorePackage.getEString(), "cvsfile", null, 0, 1, org.xtext.example.mydsl.myst.CSV.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(parseEClass, Parse.class, "Parse", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getParse_VariableCible(), ecorePackage.getEString(), "variableCible", null, 0, 1, Parse.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(calculEClass, Calcul.class, "Calcul", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCalcul_Strategy(), this.getStrategy(), null, "strategy", null, 0, 1, Calcul.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getCalcul_Algorithm(), this.getAlgorithm(), "algorithm", null, 0, 1, Calcul.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(strategyEClass, Strategy.class, "Strategy", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getStrategy_TrainingTest(), this.getTrainingTest(), null, "trainingTest", null, 0, 1, Strategy.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getStrategy_CrossValidation(), this.getCrossValidation(), null, "crossValidation", null, 0, 1, Strategy.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(crossValidationEClass, CrossValidation.class, "CrossValidation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCrossValidation_Motcle(), ecorePackage.getEString(), "motcle", null, 0, 1, CrossValidation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(trainingTestEClass, TrainingTest.class, "TrainingTest", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTrainingTest_TestRate(), ecorePackage.getEDouble(), "testRate", null, 0, 1, TrainingTest.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(algorithmEEnum, Algorithm.class, "Algorithm");
    addEEnumLiteral(algorithmEEnum, Algorithm.LINEAR_DISCRIMINANT_ANALYSIS);
    addEEnumLiteral(algorithmEEnum, Algorithm.SUPPORT_VECTOR_MACHINES);
    addEEnumLiteral(algorithmEEnum, Algorithm.QUADRATIC_DISCRIMINANT_ANALYSIS);
    addEEnumLiteral(algorithmEEnum, Algorithm.KERNEL_ESTIMATION);
    addEEnumLiteral(algorithmEEnum, Algorithm.BOOSTING);
    addEEnumLiteral(algorithmEEnum, Algorithm.DECISION_TREE);
    addEEnumLiteral(algorithmEEnum, Algorithm.NEUTRAL_NETWORK);
    addEEnumLiteral(algorithmEEnum, Algorithm.LEARNING_VECTOR_QUANTIZATION);

    initEEnum(metricEEnum, Metric.class, "Metric");
    addEEnumLiteral(metricEEnum, Metric.ACCURACY);
    addEEnumLiteral(metricEEnum, Metric.RECALL);
    addEEnumLiteral(metricEEnum, Metric.MEASURE);
    addEEnumLiteral(metricEEnum, Metric.PRECISION);
    addEEnumLiteral(metricEEnum, Metric.BALANCED_ACCURACY_SCORE);
    addEEnumLiteral(metricEEnum, Metric.HAMMING_LOSS);
    addEEnumLiteral(metricEEnum, Metric.JACCARD_SCORE);
    addEEnumLiteral(metricEEnum, Metric.MATTHEWS_CORR_COEF);
    addEEnumLiteral(metricEEnum, Metric.ZERO_ONE_LOSS);

    // Create resource
    createResource(eNS_URI);
  }

} //MystPackageImpl
