/*
 * generated by Xtext 2.19.0
 */
grammar InternalMyst;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MystGrammarAccess;

}
@parser::members {
	private MystGrammarAccess grammarAccess;

	public void setGrammarAccess(MystGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCSV
entryRuleCSV
:
{ before(grammarAccess.getCSVRule()); }
	 ruleCSV
{ after(grammarAccess.getCSVRule()); } 
	 EOF 
;

// Rule CSV
ruleCSV 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCSVAccess().getGroup()); }
		(rule__CSV__Group__0)
		{ after(grammarAccess.getCSVAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParse
entryRuleParse
:
{ before(grammarAccess.getParseRule()); }
	 ruleParse
{ after(grammarAccess.getParseRule()); } 
	 EOF 
;

// Rule Parse
ruleParse 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParseAccess().getGroup()); }
		(rule__Parse__Group__0)
		{ after(grammarAccess.getParseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCalcul
entryRuleCalcul
:
{ before(grammarAccess.getCalculRule()); }
	 ruleCalcul
{ after(grammarAccess.getCalculRule()); } 
	 EOF 
;

// Rule Calcul
ruleCalcul 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCalculAccess().getGroup()); }
		(rule__Calcul__Group__0)
		{ after(grammarAccess.getCalculAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStrategy
entryRuleStrategy
:
{ before(grammarAccess.getStrategyRule()); }
	 ruleStrategy
{ after(grammarAccess.getStrategyRule()); } 
	 EOF 
;

// Rule Strategy
ruleStrategy 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStrategyAccess().getAlternatives()); }
		(rule__Strategy__Alternatives)
		{ after(grammarAccess.getStrategyAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCrossValidation
entryRuleCrossValidation
:
{ before(grammarAccess.getCrossValidationRule()); }
	 ruleCrossValidation
{ after(grammarAccess.getCrossValidationRule()); } 
	 EOF 
;

// Rule CrossValidation
ruleCrossValidation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCrossValidationAccess().getMotcleAssignment()); }
		(rule__CrossValidation__MotcleAssignment)
		{ after(grammarAccess.getCrossValidationAccess().getMotcleAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTrainingTest
entryRuleTrainingTest
:
{ before(grammarAccess.getTrainingTestRule()); }
	 ruleTrainingTest
{ after(grammarAccess.getTrainingTestRule()); } 
	 EOF 
;

// Rule TrainingTest
ruleTrainingTest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTrainingTestAccess().getGroup()); }
		(rule__TrainingTest__Group__0)
		{ after(grammarAccess.getTrainingTestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Algorithm
ruleAlgorithm
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgorithmAccess().getAlternatives()); }
		(rule__Algorithm__Alternatives)
		{ after(grammarAccess.getAlgorithmAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Metric
ruleMetric
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMetricAccess().getAlternatives()); }
		(rule__Metric__Alternatives)
		{ after(grammarAccess.getMetricAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Strategy__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStrategyAccess().getTrainingTestAssignment_0()); }
		(rule__Strategy__TrainingTestAssignment_0)
		{ after(grammarAccess.getStrategyAccess().getTrainingTestAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getStrategyAccess().getCrossValidationAssignment_1()); }
		(rule__Strategy__CrossValidationAssignment_1)
		{ after(grammarAccess.getStrategyAccess().getCrossValidationAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Algorithm__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAlgorithmAccess().getLinearDiscriminantAnalysisEnumLiteralDeclaration_0()); }
		('linearDiscriminantAnalysis')
		{ after(grammarAccess.getAlgorithmAccess().getLinearDiscriminantAnalysisEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getAlgorithmAccess().getSupportVectorMachinesEnumLiteralDeclaration_1()); }
		('supportVectorMachines')
		{ after(grammarAccess.getAlgorithmAccess().getSupportVectorMachinesEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getAlgorithmAccess().getQuadraticDiscriminantAnalysisEnumLiteralDeclaration_2()); }
		('quadraticDiscriminantAnalysis')
		{ after(grammarAccess.getAlgorithmAccess().getQuadraticDiscriminantAnalysisEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getAlgorithmAccess().getKernelEstimationEnumLiteralDeclaration_3()); }
		('kernelEstimation')
		{ after(grammarAccess.getAlgorithmAccess().getKernelEstimationEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getAlgorithmAccess().getBoostingEnumLiteralDeclaration_4()); }
		('boosting')
		{ after(grammarAccess.getAlgorithmAccess().getBoostingEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getAlgorithmAccess().getDecisionTreeEnumLiteralDeclaration_5()); }
		('decisionTree')
		{ after(grammarAccess.getAlgorithmAccess().getDecisionTreeEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getAlgorithmAccess().getNeutralNetworkEnumLiteralDeclaration_6()); }
		('neutralNetwork')
		{ after(grammarAccess.getAlgorithmAccess().getNeutralNetworkEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getAlgorithmAccess().getLearningVectorQuantizationEnumLiteralDeclaration_7()); }
		('learningVectorQuantization')
		{ after(grammarAccess.getAlgorithmAccess().getLearningVectorQuantizationEnumLiteralDeclaration_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Metric__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMetricAccess().getAccuracyEnumLiteralDeclaration_0()); }
		('showAccuracy')
		{ after(grammarAccess.getMetricAccess().getAccuracyEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getMetricAccess().getRecallEnumLiteralDeclaration_1()); }
		('showRecall')
		{ after(grammarAccess.getMetricAccess().getRecallEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getMetricAccess().getMeasureEnumLiteralDeclaration_2()); }
		('showFMeasure')
		{ after(grammarAccess.getMetricAccess().getMeasureEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getMetricAccess().getPrecisionEnumLiteralDeclaration_3()); }
		('showPrecision')
		{ after(grammarAccess.getMetricAccess().getPrecisionEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getMetricAccess().getBalancedAccuracyScoreEnumLiteralDeclaration_4()); }
		('showBalancedAccuracyScore')
		{ after(grammarAccess.getMetricAccess().getBalancedAccuracyScoreEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getMetricAccess().getHammingLossEnumLiteralDeclaration_5()); }
		('showHammingLoss')
		{ after(grammarAccess.getMetricAccess().getHammingLossEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getMetricAccess().getJaccardScoreEnumLiteralDeclaration_6()); }
		('showJaccardScore')
		{ after(grammarAccess.getMetricAccess().getJaccardScoreEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getMetricAccess().getMatthewsCorrCoefEnumLiteralDeclaration_7()); }
		('showMatthewsCorrCoef')
		{ after(grammarAccess.getMetricAccess().getMatthewsCorrCoefEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getMetricAccess().getZeroOneLossEnumLiteralDeclaration_8()); }
		('showZeroOneLoss')
		{ after(grammarAccess.getMetricAccess().getZeroOneLossEnumLiteralDeclaration_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getCsvAssignment_0()); }
	(rule__Program__CsvAssignment_0)
	{ after(grammarAccess.getProgramAccess().getCsvAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getParseAssignment_1()); }
	(rule__Program__ParseAssignment_1)
	{ after(grammarAccess.getProgramAccess().getParseAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__2__Impl
	rule__Program__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getCalculAssignment_2()); }
	(rule__Program__CalculAssignment_2)
	{ after(grammarAccess.getProgramAccess().getCalculAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getMetricAssignment_3()); }
	(rule__Program__MetricAssignment_3)
	{ after(grammarAccess.getProgramAccess().getMetricAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CSV__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CSV__Group__0__Impl
	rule__CSV__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CSV__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCSVAccess().getCSVKeyword_0()); }
	'CSV'
	{ after(grammarAccess.getCSVAccess().getCSVKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CSV__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CSV__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CSV__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCSVAccess().getCvsfileAssignment_1()); }
	(rule__CSV__CvsfileAssignment_1)
	{ after(grammarAccess.getCSVAccess().getCvsfileAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parse__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parse__Group__0__Impl
	rule__Parse__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parse__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParseAccess().getParseKeyword_0()); }
	'parse'
	{ after(grammarAccess.getParseAccess().getParseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parse__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parse__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parse__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParseAccess().getVariableCibleAssignment_1()); }
	(rule__Parse__VariableCibleAssignment_1)?
	{ after(grammarAccess.getParseAccess().getVariableCibleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Calcul__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Calcul__Group__0__Impl
	rule__Calcul__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Calcul__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCalculAccess().getStrategyAssignment_0()); }
	(rule__Calcul__StrategyAssignment_0)
	{ after(grammarAccess.getCalculAccess().getStrategyAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calcul__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Calcul__Group__1__Impl
	rule__Calcul__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Calcul__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCalculAccess().getCommaKeyword_1()); }
	','
	{ after(grammarAccess.getCalculAccess().getCommaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calcul__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Calcul__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Calcul__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCalculAccess().getAlgorithmAssignment_2()); }
	(rule__Calcul__AlgorithmAssignment_2)
	{ after(grammarAccess.getCalculAccess().getAlgorithmAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TrainingTest__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrainingTest__Group__0__Impl
	rule__TrainingTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrainingTestAccess().getTrainingTestKeyword_0()); }
	'trainingTest'
	{ after(grammarAccess.getTrainingTestAccess().getTrainingTestKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrainingTest__Group__1__Impl
	rule__TrainingTest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrainingTestAccess().getCommaKeyword_1()); }
	','
	{ after(grammarAccess.getTrainingTestAccess().getCommaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrainingTest__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrainingTestAccess().getTestRateAssignment_2()); }
	(rule__TrainingTest__TestRateAssignment_2)
	{ after(grammarAccess.getTrainingTestAccess().getTestRateAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__CsvAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getCsvCSVParserRuleCall_0_0()); }
		ruleCSV
		{ after(grammarAccess.getProgramAccess().getCsvCSVParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__ParseAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getParseParseParserRuleCall_1_0()); }
		ruleParse
		{ after(grammarAccess.getProgramAccess().getParseParseParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__CalculAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getCalculCalculParserRuleCall_2_0()); }
		ruleCalcul
		{ after(grammarAccess.getProgramAccess().getCalculCalculParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__MetricAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getMetricMetricEnumRuleCall_3_0()); }
		ruleMetric
		{ after(grammarAccess.getProgramAccess().getMetricMetricEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CSV__CvsfileAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCSVAccess().getCvsfileSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getCSVAccess().getCvsfileSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parse__VariableCibleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParseAccess().getVariableCibleSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getParseAccess().getVariableCibleSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calcul__StrategyAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCalculAccess().getStrategyStrategyParserRuleCall_0_0()); }
		ruleStrategy
		{ after(grammarAccess.getCalculAccess().getStrategyStrategyParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Calcul__AlgorithmAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCalculAccess().getAlgorithmAlgorithmEnumRuleCall_2_0()); }
		ruleAlgorithm
		{ after(grammarAccess.getCalculAccess().getAlgorithmAlgorithmEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Strategy__TrainingTestAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStrategyAccess().getTrainingTestTrainingTestParserRuleCall_0_0()); }
		ruleTrainingTest
		{ after(grammarAccess.getStrategyAccess().getTrainingTestTrainingTestParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Strategy__CrossValidationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStrategyAccess().getCrossValidationCrossValidationParserRuleCall_1_0()); }
		ruleCrossValidation
		{ after(grammarAccess.getStrategyAccess().getCrossValidationCrossValidationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__MotcleAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCrossValidationAccess().getMotcleCrossValidationKeyword_0()); }
		(
			{ before(grammarAccess.getCrossValidationAccess().getMotcleCrossValidationKeyword_0()); }
			'crossValidation'
			{ after(grammarAccess.getCrossValidationAccess().getMotcleCrossValidationKeyword_0()); }
		)
		{ after(grammarAccess.getCrossValidationAccess().getMotcleCrossValidationKeyword_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__TestRateAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrainingTestAccess().getTestRatePOURCENTAGE_TESTTerminalRuleCall_2_0()); }
		RULE_POURCENTAGE_TEST
		{ after(grammarAccess.getTrainingTestAccess().getTestRatePOURCENTAGE_TESTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_POURCENTAGE_TEST : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
