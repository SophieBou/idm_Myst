/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMystParser;
import org.xtext.example.mydsl.services.MystGrammarAccess;

public class MystParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MystGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MystGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStrategyAccess().getAlternatives(), "rule__Strategy__Alternatives");
			builder.put(grammarAccess.getAlgorithmAccess().getAlternatives(), "rule__Algorithm__Alternatives");
			builder.put(grammarAccess.getMetricAccess().getAlternatives(), "rule__Metric__Alternatives");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getCSVAccess().getGroup(), "rule__CSV__Group__0");
			builder.put(grammarAccess.getParseAccess().getGroup(), "rule__Parse__Group__0");
			builder.put(grammarAccess.getCalculAccess().getGroup(), "rule__Calcul__Group__0");
			builder.put(grammarAccess.getTrainingTestAccess().getGroup(), "rule__TrainingTest__Group__0");
			builder.put(grammarAccess.getProgramAccess().getCsvAssignment_0(), "rule__Program__CsvAssignment_0");
			builder.put(grammarAccess.getProgramAccess().getParseAssignment_1(), "rule__Program__ParseAssignment_1");
			builder.put(grammarAccess.getProgramAccess().getCalculAssignment_2(), "rule__Program__CalculAssignment_2");
			builder.put(grammarAccess.getProgramAccess().getMetricAssignment_3(), "rule__Program__MetricAssignment_3");
			builder.put(grammarAccess.getCSVAccess().getCvsfileAssignment_1(), "rule__CSV__CvsfileAssignment_1");
			builder.put(grammarAccess.getParseAccess().getVariableCibleAssignment_1(), "rule__Parse__VariableCibleAssignment_1");
			builder.put(grammarAccess.getCalculAccess().getStrategyAssignment_0(), "rule__Calcul__StrategyAssignment_0");
			builder.put(grammarAccess.getCalculAccess().getAlgorithmAssignment_2(), "rule__Calcul__AlgorithmAssignment_2");
			builder.put(grammarAccess.getStrategyAccess().getTrainingTestAssignment_0(), "rule__Strategy__TrainingTestAssignment_0");
			builder.put(grammarAccess.getStrategyAccess().getCrossValidationAssignment_1(), "rule__Strategy__CrossValidationAssignment_1");
			builder.put(grammarAccess.getCrossValidationAccess().getMotcleAssignment(), "rule__CrossValidation__MotcleAssignment");
			builder.put(grammarAccess.getTrainingTestAccess().getTestRateAssignment_2(), "rule__TrainingTest__TestRateAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MystGrammarAccess grammarAccess;

	@Override
	protected InternalMystParser createParser() {
		InternalMystParser result = new InternalMystParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MystGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MystGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
